# *** README FIRST ***
# This example file contains all environmental variables that can be passed to the Hajk backend.
# To actually pass variables, create a .env file and define the variables there.
#
# This file is organized into categories. Each category starts with a header, surrounded by "***".

# *** General NodeJS settings ***

# This is useful in a cluster environment where we want the different cluster
# instances to write to different log files. 
# Suppose a scenario where you want to share the codebase among servers (so you only
# need to update files in one place). This .env file would be shared too, naturally, as
# you probably want the same settings (mostly). There are however cases where you'd like
# to have unique env variables on the different cluster instances, and one such variable is
# the HAJK_INSTANCE_ID below.
#
# The value below will be applied to the log's name. Note that you should override it on a per-instance-basis
# because this .env file is probably shared by multiple instances. Refer to your OS's documentation
# for how to set environment variables on runtime, e.g. on *NIX systems it's: 'MY_VARIABLE=foo node index.js'
HAJK_INSTANCE_ID=

# Set to "development" or "production", see: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
NODE_ENV=development

# *** HTTP SERVER SETTINGS ***
# Port that the HTTP server will listen on
PORT=3002

# *** Backend API versions ***
# Hajk's backend comes with a versioned API. 
# The initial, .NET compatible API is version 1.
# The improved version, which includes e.g. consolidated loading of 
# config in client is version 2. 
#
# The recommended setting is to leave this empty (i.e. outcommented). This means that all
# currently supported versions of the API are enabled.
# If you want to enable only specific version(s), supply a comma-separated list, e.g.
#API_VERSIONS=2,3 # Disables /api/v1, enables /api/v2 and /api/v3

# When an Express app is running behind a proxy, app.set('trust proxy') should be
# set. This setting simply passes its value to Express as the value of 'trust proxy'. 
# To sum up: if set to true, the client IP will be extracted from the leftmost portion
# of X-Forwarded-For. Else, the client's IP is assumed to be the same as req.connection.remoteAddress. 
# See https://expressjs.com/en/guide/behind-proxies.html for an explanation. 
EXPRESS_TRUST_PROXY=

# Comma seperated list of allowed hosts in the CORS middleware.
# If left empty, "*" is set (In that case the authentication won't work).
# Set to the origin(s) of the applications that will fetch data from the backend.
CORS_ALLOWED_ORIGINS=http://localhost:3001

# Should the experimental WebSockets API be enabled?
ENABLE_WEBSOCKETS=false

# Limit the body size of incoming requests. The default value, 1000kb, is rather
# high, in order to accommodate for requests from admin that can contain entire
# DocumentHandler configuration, when that plugin is activated. 
REQUEST_LIMIT=1000kb

# Usually it's a good idea to make compress the http server's output. There are
# however situations, such as high-traffic sites, where the GZIP compression is
# best implemented at the reverse proxy level, which makes it unnecessary to enable
# it in Express. This option makes it possible to disable Hajk backend's built-in 
# compression.
#ENABLE_GZIP_COMPRESSION=true

# Session secret for session signing. Provide a string value or a comma-separated list, 
# keeping the old session secrets at the end of the string. Changing the session secret
# while _not_ providing the old secrets at the end of the string will invalidate
# all existing sessions.
EXPRESS_SESSION_SECRET=mySecret,somePreviouslyUsedSecret

# Force the session identifier cookie to be set on every response. Set to false to allow
# the session to invalidate when maxAge of the cookie is reached.
EXPRESS_SESSION_ROLLING=true

# The name of the session, used in the cookie.
EXPRESS_SESSION_NAME=hajk.sid

# Control which directories will be statically exposed on the HTTP server.
# Because the endpoints of the Static Exposer are not versioned, we must
# decide which API version we want to use for those routes. The default value
# is "LATEST" but you can specify any of the allowed API versions. Usually, 
# the default value is fine.
STATIC_EXPOSER_VERSION=LATEST 
# Expose Hajk's client app directly under /
EXPOSE_CLIENT=true
# If we expose /admin, we want probably to restrict access to it. Make sure 
# to enable AD_* settings below in order for this to work.
RESTRICT_ADMIN_ACCESS_TO_AD_GROUPS=

# Other static files can be shared (and restricted to AD groups!) via Hajk's backend. 
# E.g. to make foo-bar accessible as /foo-bar for groups gr1 and gr2, put the "foo-bar" 
# directory inside "static" and add "EXPOSE_AND_RESTRICT_STATIC_FOO_BAR=gr1,gr2" to this file. 

# If no restriction is specified but the key exists, the access is unrestricted.
EXPOSE_AND_RESTRICT_STATIC_API_EXPLORER=
# If key exists and is specified, the access is limited to the specified groups
EXPOSE_AND_RESTRICT_STATIC_ADMIN=GIS_ADMIN
# By default, the static exposer will expose an entire directory structure, letting
# request fall through (i.e. /admin/foo/bar will look for files in /static/admin/foo/bar).
# Sometime you may want to change this behaviour and force all paths under a specific
# endpoint to be directed to a specific file (typically, entry point into a SPA).
# This can be achived by specifing another key:
EXPOSE_AND_RESTRICT_STATIC_ADMIN_CATCH_ALL_FILENAME=index.html # Force all /admin/* requests to /static/admin/index.html

# *** DEVELOPER'S SETTINGS ***
# Browser that will be auto-started when developing
BROWSER=

# *** LOGGING SETTINGS ***
# Log level for all appenders, see log4js for documentation.
# Allowed values: ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < MARK < OFF
LOG_LEVEL=all

# Number of older log files to keep. Note that they're configured to rotate daily.
#LOG_NUM_BACKUPS=14

# If true, all the logs files (except for the current one) will be gzipped.
#LOG_COMPRESS_BACKUPS=false

# Select where the log will be printed. Valid appenders are "console" and "file".
# "console" will print output to stdout. 
# "file" will print to a file â€“ logs/output.log.
LOG_DEBUG_TO=console,file

# List of appenders that will print web server's access log.
# Empty value will disable printing of access log.
# "accessLog" will write to logs/access.log.
# "console" will print to stdout.
LOG_ACCESS_LOG_TO=accessLog

# If true, all events that result in write to the JSON data store
# (such as modifying a map config or adding a layer), will be written
# to a separate log, containing the action performed and user name (if AD 
# is active).
LOG_ADMIN_EVENTS=true

LOG_DETAILED_REQUEST_LOGGER=false

# Additionally, you may be interested in Express's default logging,
# see https://expressjs.com/en/guide/debugging.html for details
#DEBUG=express:*

# *** GENERIC HAJK PROXY SETTINGS, SEE #824 ***
PROXY_GEOSERVER=https://demo.geo-solutions.it/geoserver
PROXY_QGISSERVER=http://qgis.example.com:8080

# *** FB SOKIGO PROXY SETTINGS ***
FB_SERVICE_ACTIVE=
FB_SERVICE_BASE_URL=
FB_SERVICE_DB=
FB_SERVICE_USER=
FB_SERVICE_PASS=

# *** FME-SERVER SETTINGS ***
# To enable the FME-server proxy, uncomment the settings below and supply proper values.
#FME_SERVER_ACTIVE=true
# The url to the FME-server instance.
#FME_SERVER_BASE_URL=https://fmeserver.some.domain.com
# Access to FME using authorization header. Either use USER+PASSWORD or TOKEN.
# A FME-server user with access to some repository and workspace.
#FME_SERVER_USER=someFmeUser
# Password for the FME-server user supplied above.
#FME_SERVER_PASSWORD=aGreatFmeUserPassWord
# Access token for the FME-server.
#FME_SERVER_TOKEN=00ce08a1c85e572612518e12e47a8b73151axxxx
# If you are having problems with proxying to HTTPS FME Server, due
# to self-signed certificates (SELF_SIGNED_CERT_IN_CHAIN), try setting this to "false"
#FME_SERVER_SECURE=true

# *** AUTHENTICATION SETTINGS ***
AUTH_ACTIVE=true

# *** ACTIVEDIRECTORY SETTINGS ***
AD_LOOKUP_ACTIVE=false
# AD_USE_GROUPS_FROM_HEADER will turn on passive AD lookup where both user and groups
# comes from headers.
# If a proxy is used to produce the headers AD_TRUSTED_PROXY_IPS could be set to ::1.
AD_USE_GROUPS_FROM_HEADER=false
# Comma-separated list of allowed IPs that we trust. Set to your proxy/ies IP.
# Avoid whitespaces. If not set, but AD lookup is active, a warning will be displayed
# as it is very dangerous to trust X-Control-Header from any remote IP.
AD_TRUSTED_PROXY_IPS=10.0.1.1,10.0.1.2
# Name of the HTTP header that will contain the trusted user name
AD_TRUSTED_HEADER=X-Control-Header
# Necessary settings to make lookups in AD possible
# Name of the HTTP header that will contain the trusted groups, only used when
# AD_USE_HEADER_GROUP_METHOD is true.
AD_TRUSTED_GROUP_HEADER=X-Control-Group-Header
# Name of the HTTP header that will contain the trusted email, only used when
# AD_USE_HEADER_GROUP_METHOD is true.
AD_TRUSTED_EMAIL_HEADER=X-Control-Email-Header

AD_URL=ldap://some.domain.com # Also, check out the AD_TLS_* settings below for ldaps://
AD_BASE_DN=DC=test,DC=example,DC=com
AD_USERNAME=user
AD_PASSWORD=pass

# Should the backend attempt to connect to the LDAP server on startup? Defaults to true
# as it's usualy a good idea to ensure that the configuration is correct and the
# connection can be established.
AD_CHECK_CONNECTION=true
# Used to send a basic query to the AD on startup, to ensure the connection is working.
# Leave empty to send an empty query (should work for all cases). 
#AD_CHECK_CONNECTION_QUERY=

# The followig options allow for better control of reconnection and timeouts.
# It is recommended to set AD_RECCONNECT to `true`. The various timeout options
# allow for further customization to ensure a stable LDAP connection, but they
# are disabled by default. See also http://ldapjs.org/client.html
AD_RECONNECT=true
#AD_CONNECTTIMEOUT=60000
#AD_IDLETIMEOUT=60000
#AD_TIMEOUT=120000

# Controls whether the AD user object will be sent in the GET map config response.
# This is a useful way to let Client UI know more about the user and allows for
# user-specific customization.
#AD_EXPOSE_USER_OBJECT=true

# For LDAPS we must provide the following TLS options. 
# Leave empty if you don't use LDAPS.
#AD_TLS_PATH_TO_KEY=   # "/absolute/path/to/serverkey.pem"
#AD_TLS_PATH_TO_CERT=  # "/absolute/path/to/servercert.pem"
#AD_TLS_PATH_TO_CA=    # "/absolute/path/to/cacert.pem"
#AD_TLS_PASSPHRASE=    # "superSecretDecryptPassPhraseGoesHere"

# For development and testing purposes, a user name can be supplied here.
# Make sure to always disable this in production!
# AD_OVERRIDE_USER_WITH_VALUE=someUser
# For development and testing purposes, an email can be supplied here.
# Make sure to always disable this in production!
# AD_OVERRIDE_USER_EMAIL_WITH_VALUE=test@email.com
# For development and testing purposes, groups can be supplied here.
# Make sure to always disable this in production!
# AD_OVERRIDE_USER_GROUPS_WITH_VALUE=someGroup1,someGroup2

# *** INFORMATIVE BACKEND SETTINGS ***
# Override path to the location of uploaded files to be used with the /mapconfig/list* endpoints.
# Defaults to "${BACKEND_WORK_DIR}/App_Data/Upload"
#INFORMATIVE_CUSTOM_UPLOAD_DIR_ABSOLUTE_PATH=/opt/www/upload

# Override which file extensions are returned for each of the /mapconfig/list* endpoints. 
# The default values are provided below. You don't need to provide the coresponding uppercase
# version of each extensions - it's taken care of inside the code. I.e.  adding ".webp" here
# will check for both ".webp" and ".WEBP".
#INFORMATIVE_CUSTOM_IMAGE_EXTENSIONS=".png,.jpg,.jpeg"
#INFORMATIVE_CUSTOM_AUDIO_EXTENSIONS=".mp3,.wav,.ogg"
#INFORMATIVE_CUSTOM_VIDEO_EXTENSIONS=".mp4,.mov,.ogg"

# *** OPENAPI SETTINGS ***
OPENAPI_ENABLE_RESPONSE_VALIDATION=false

# *** ANALYTICS SETTINGS ***
# Type of service. Currently "plausible" is supported. Support for "matomo" is planned too.
#ANALYTICS_TYPE="plausible" 
# Options that will be passed to the service. Must start with "ANALYTICS_OPTION_". Please
# refer to the specific service's documentation (https://github.com/plausible/plausible-tracker#usage)
#ANALYTICS_OPTION_DOMAIN="hajk.example.com" # Your site's domain, as declared by you in Plausible's settings
#ANALYTICS_OPTION_APIHOST="https://plausible.io" # Plausible's API host to use. Change this if you are self-hosting.
#ANALYTICS_OPTION_TRACKLOCALHOST=false #Enables tracking on localhost.	

# *** Example settings for Matomo analytics ***
#ANALYTICS_TYPE="matomo" 
#ANALYTICS_OPTION_TRACKERURL=https://xxxxxxxxxx.matomo.cloud
#ANALYTICS_OPTION_SITEID=4

# *** FIR SETTINGS ***
# The url is an endpoint in myCarta FR Direkt
# The output dir is where the generated xlsx files will be placed.
# FIR_REALESTATEOWNERREPORT_URL=https://fastighetsrapport-utv.domain.se/Report/fastighetsforteckning/xlsx
# FIR_TEMP_OUTPUT_DIR=/temp/

# *** PRISMA SETTINGS ***
# If you want to log the SQL requests, pick the level(s). Please provide as a comma-separated string. 
# For allowed values, refer to: https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/logging#the-log-option
#PG_LOG_LEVELS="query,info,warn,error,debug"

# See the documentation for all the connection string options: https://www.prisma.io/docs/orm/reference/connection-urls
# PG_CONNECTION_STRING is used for the main Hajk database store
PG_CONNECTION_STRING="postgresql://user:password@host:port/hajk?schema=production"
# PG_GISDATA_CONNECTION_STRING is a secondary, optional connection. It's not used by Hajk configuration,
# instead it's the typical GIS database that holds spatial data and is used by various services that
# the Hajk backend provides (such as autocomplete and search).
PG_GISDATA_CONNECTION_STRING="postgresql://user:password@host:port/gisdata?schema=production"