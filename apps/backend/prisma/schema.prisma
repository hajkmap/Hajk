generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../server/generated/zod"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_CONNECTION_STRING")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model LocalAccount {
  id       String    @id @default(cuid())
  userId   String    @unique
  email    String    @unique
  password String
  fullName String
  expires  DateTime?
  user     User      @relation(fields: [userId], references: [id])
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  fullName     String
  strategy     AuthStrategy
  localAccount LocalAccount?
  roles        RoleOnUser[]
}

model Role {
  id                  String                @id @default(cuid())
  code                String                @unique
  title               String?
  description         String?
  systemCriticalRole  Boolean               @default(false)
  users               RoleOnUser[]
  RoleOnMap           RoleOnMap[]
  RoleOnLayer         RoleOnLayer[]
  RoleOnLayerInstance RoleOnLayerInstance[]
  RoleOnTool          RoleOnTool[]
  RoleOnGroup         RoleOnGroup[]
}

model RoleOnUser {
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model RoleOnMap {
  mapId  Int
  roleId String
  map    Map    @relation(fields: [mapId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([mapId, roleId])
}

model RoleOnLayer {
  layerId String
  roleId  String
  layer   Layer  @relation(fields: [layerId], references: [id], onDelete: Cascade)
  role    Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([layerId, roleId])
}

model RoleOnLayerInstance {
  layerInstanceId String
  roleId          String
  role            Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  layerInstance   LayerInstance @relation(fields: [layerInstanceId], references: [id], onDelete: Cascade)

  @@id([layerInstanceId, roleId])
}

model RoleOnTool {
  toolId Int
  roleId String
  tool   Tool   @relation(fields: [toolId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([toolId, roleId])
}

model RoleOnGroup {
  groupId String
  roleId  String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role    Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([groupId, roleId])
}

model Map {
  id                Int             @id @default(autoincrement())
  locked            Boolean         @default(false)
  name              String          @unique
  options           Json            @default("{}")
  projections       Projection[]
  tools             ToolsOnMaps[]
  layers            LayerInstance[]
  groups            GroupsOnMaps[]
  restrictedToRoles RoleOnMap[]
}

model Tool {
  id                Int           @id @default(autoincrement())
  locked            Boolean       @default(false)
  type              String
  options           Json          @default("{}")
  maps              ToolsOnMaps[]
  restrictedToRoles RoleOnTool[]
}

model ToolsOnMaps {
  mapName String
  toolId  Int
  /// Determines the sort between tools
  index   Int    @default(0)
  /// Allows overridding default tool options (set in Tool) on a per-map basis
  options Json   @default("{}")
  map     Map    @relation(fields: [mapName], references: [name])
  tool    Tool   @relation(fields: [toolId], references: [id])

  @@id([mapName, toolId])
}

model Projection {
  id         Int       @id @default(autoincrement())
  locked     Boolean   @default(false)
  code       String    @unique
  definition String
  extent     Decimal[]
  units      String?
  maps       Map[]
}

model Group {
  id                String          @id @default(cuid())
  locked            Boolean         @default(false)
  name              String
  layers            LayerInstance[]
  maps              GroupsOnMaps[]
  restrictedToRoles RoleOnGroup[]
}

model Service {
  id         String      @id @default(cuid())
  name       String
  locked     Boolean     @default(false)
  url        String
  type       ServiceType
  serverType ServerType?
  comment    String?
  layers     Layer[]

  @@unique([url, type])
}

model Layer {
  id                String          @id @default(cuid())
  locked            Boolean         @default(false)
  service           Service         @relation(fields: [serviceId], references: [id])
  serviceId         String
  options           Json            @default("{}")
  restrictedToRoles RoleOnLayer[]
  instances         LayerInstance[]
}

model LayerInstance {
  id                String                @id @default(cuid())
  layerId           String
  mapId             Int?
  groupId           String?
  layer             Layer                 @relation(fields: [layerId], references: [id])
  map               Map?                  @relation(fields: [mapId], references: [id])
  group             Group?                @relation(fields: [groupId], references: [id])
  usage             UseType
  restrictedToRoles RoleOnLayerInstance[]
  options           Json                  @default("{}")
}

model GroupsOnMaps {
  id            String         @id @default(cuid())
  mapName       String // It relates to a map via its name
  groupId       String // It relates to a group via its ID
  map           Map            @relation(fields: [mapName], references: [name])
  group         Group          @relation(fields: [groupId], references: [id])
  parentGroupId String? // This particular GroupOnMap can have a parent GroupOnMap
  parent        GroupsOnMaps?  @relation("GroupOnGroups", fields: [parentGroupId], references: [id]) // The optional parent record
  groups        GroupsOnMaps[] @relation("GroupOnGroups") // The optional list of children records

  usage    UseType // It may be used as a background or a foreground group
  name     String // It has a title, shown to the user
  toggled  Boolean
  expanded Boolean
}

enum ServiceType {
  ARCGIS
  VECTOR
  WFS
  WFST
  WMS
  WMTS
}

enum ServerType {
  QGIS_SERVER
  GEOSERVER
}

enum UseType {
  BACKGROUND
  FOREGROUND
}

enum AuthStrategy {
  LOCAL
  AZURE_AD
  GITHUB
}
