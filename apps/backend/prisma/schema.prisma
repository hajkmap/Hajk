generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_CONNECTION_STRING")
}

model Map {
  id          Int            @id @default(autoincrement())
  locked      Boolean        @default(false)
  name        String         @unique
  options     Json           @default("{}")
  projections Projection[]
  tools       ToolsOnMaps[]
  layers      LayersOnMaps[]
  groups      GroupsOnMaps[]
}

model Tool {
  id      Int           @id @default(autoincrement())
  locked  Boolean       @default(false)
  type    String
  options Json          @default("{}")
  maps    ToolsOnMaps[]
}

model ToolsOnMaps {
  mapName String
  toolId  Int
  /// Determines the sort between tools
  index   Int    @default(0)
  /// Allows overridding default tool options (set in Tool) on a per-map basis
  options Json   @default("{}")
  map     Map    @relation(fields: [mapName], references: [name])
  tool    Tool   @relation(fields: [toolId], references: [id])

  @@id([mapName, toolId])
}

model Projection {
  id         Int       @id @default(autoincrement())
  locked     Boolean   @default(false)
  code       String    @unique
  definition String
  extent     Decimal[]
  units      String?
  maps       Map[]
}

model Group {
  id     String           @id @default(cuid())
  locked Boolean          @default(false)
  name   String
  layers LayersOnGroups[]
  maps   GroupsOnMaps[]
}

model Service {
  id         String      @id @default(cuid())
  locked     Boolean     @default(false)
  url        String
  type       ServiceType
  serverType ServerType
  comment    String?
  layers     Layer[]

  @@unique([url, type])
}

model Layer {
  id        String           @id @default(cuid())
  locked    Boolean          @default(false)
  service   Service          @relation(fields: [serviceId], references: [id])
  serviceId String
  options   Json             @default("{}")
  maps      LayersOnMaps[]
  groups    LayersOnGroups[]
}

model LayersOnGroups {
  id               Int      @id @default(autoincrement())
  groupId          String
  layerId          String
  group            Group    @relation(fields: [groupId], references: [id])
  layer            Layer    @relation(fields: [layerId], references: [id])
  infobox          String
  drawOrder        Int
  visibleAtStart   Boolean
  visibleForGroups String[]
}

model LayersOnMaps {
  id               Int      @id @default(autoincrement())
  mapName          String
  layerId          String
  map              Map      @relation(fields: [mapName], references: [name])
  layer            Layer    @relation(fields: [layerId], references: [id])
  usage            UseType
  infobox          String
  drawOrder        Int
  visibleAtStart   Boolean
  visibleForGroups String[]
}

model GroupsOnMaps {
  id            String         @id @default(cuid())
  mapName       String // It relates to a map via its name
  groupId       String // It relates to a group via its ID
  map           Map            @relation(fields: [mapName], references: [name])
  group         Group          @relation(fields: [groupId], references: [id])
  parentGroupId String? // This particular GroupOnMap can have a parent GroupOnMap
  parent        GroupsOnMaps?  @relation("GroupOnGroups", fields: [parentGroupId], references: [id]) // The optional parent record
  groups        GroupsOnMaps[] @relation("GroupOnGroups") // The optional list of children records

  usage    UseType // It may be used as a background or a foreground group
  name     String // It has a title, shown to the user
  toggled  Boolean
  expanded Boolean
}

enum ServiceType {
  ARCGIS
  VECTOR
  WFS
  WFST
  WMS
  WMTS
}

enum ServerType {
  QGIS_SERVER
  GEOSERVER
}

enum UseType {
  BACKGROUND
  FOREGROUND
}
