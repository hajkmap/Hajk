openapi: 3.0.3
info:
  title: Hajk Backend API
  description: The Hajk backend API specification is  the authoritative specification for the API to which all Hajk backend implementations must conform.
  version: 3.0.0
servers:
  - url: /api/v3
tags:
  - name: Client-accessible
    description: Resources necessary to load a working map in client
  - name: Admin only
    description: Resources that modify the database content and required an authorized user
  - name: Specification
    description: The OpenAPI specification
paths:
  /maps:
    get:
      tags:
        - Client-accessible
      responses:
        200:
          description: Return the list of maps
        500:
          description: Internal server error
    post:
      tags:
        - Admin only
      requestBody:
        description: Json with table data
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the map
                  example: my_map
                options:
                  $ref: "#/components/schemas/MapConfig"
                locked:
                  type: boolean
                  description: Lock the map
                  example: false
              required:
                - name
      responses:
        200:
          description: Return the list of maps
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /maps/{mapName}:
    get:
      tags:
        - Client-accessible
      parameters:
        - name: mapName
          in: path
          description: Name of the map to be fetched
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the map config
        404:
          description: Requested map was not found
    patch:
      tags:
        - Admin only
      parameters:
        - name: mapName
          in: path
          description: Name of the map to be fetched
          required: true
          schema:
            type: string
      requestBody:
        description: Json with table data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MapConfig"
      responses:
        200:
          description: Return the map config
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Admin only
      parameters:
        - name: mapName
          in: path
          description: Name of the map to be fetched
          required: true
          schema:
            type: string
      responses:
        204:
          description: Map deleted
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /layers:
    get:
      tags:
        - Client-accessible
      responses:
        200:
          description: Return the list of layers
        500:
          description: Internal server error
  /groups:
    get:
      tags:
        - Client-accessible
      responses:
        200:
          description: Return the list of groups
        500:
          description: Internal server error
  /groups/{groupId}:
    get:
      tags:
        - Client-accessible
      parameters:
        - name: groupId
          in: path
          description: ID of the group to be fetched
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the group
        404:
          description: Requested group was not found
  /groups/{groupId}/maps:
    get:
      tags:
        - Client-accessible
      parameters:
        - name: groupId
          in: path
          description: ID of the group to be fetched
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the maps that use the group
        404:
          description: Requested group was not found
  /groups/{groupId}/layers:
    get:
      tags:
        - Client-accessible
      parameters:
        - name: groupId
          in: path
          description: ID of the group to be fetched
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the layers that belong to the group
        404:
          description: Requested group was not found
  /tools:
    get:
      tags:
        - Client-accessible
      responses:
        200:
          description: Return the list of tools
        500:
          description: Internal server error
  /tools/{toolName}/maps:
    get:
      tags:
        - Client-accessible
      parameters:
        - name: toolName
          in: path
          description: Name of the tool to be fetched
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the maps that use the tool
        404:
          description: Requested tool was not found
  /search/autocomplete:
    post:
      tags:
        - Client-accessible
      description: Fuzzy search (for autocomplete)
      responses:
        200:
          description: List of results
          content: {}
      parameters:
        - in: header
          name: X-Control-Header
          description: User name that will be supplied to AD
          schema:
            type: string
          required: false
      requestBody:
        description: Json with table data
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchAutocompleteBody"
  /websockets:
    get:
      tags:
        - Client-accessible
      description: WebSocket upgrade endpoint for real-time communication
      summary: WebSocket Connection
      responses:
        101:
          description: Switching Protocols - WebSocket connection established
          headers:
            Upgrade:
              schema:
                type: string
                example: "websocket"
            Connection:
              schema:
                type: string
                example: "Upgrade"
            Sec-WebSocket-Accept:
              schema:
                type: string
                example: "s3pPLMBiTxaQ9kYGzzhZRbK+xOo="
        400:
          description: Bad Request - Invalid WebSocket upgrade request
        426:
          description: Upgrade Required - Request must be upgraded to WebSocket
      parameters:
        - in: header
          name: Upgrade
          description: Must be "websocket" for WebSocket upgrade
          required: true
          schema:
            type: string
            enum: ["websocket"]
        - in: header
          name: Connection
          description: Must be "Upgrade" for WebSocket upgrade
          required: true
          schema:
            type: string
            enum: ["Upgrade"]
        - in: header
          name: Sec-WebSocket-Key
          description: WebSocket key for handshake
          required: true
          schema:
            type: string
        - in: header
          name: Sec-WebSocket-Version
          description: WebSocket version
          required: true
          schema:
            type: string
            enum: ["13"]
  /websockets/health:
    get:
      tags:
        - Client-accessible
      description: Get WebSocket server health status and statistics
      summary: WebSocket Health Check
      responses:
        200:
          description: WebSocket health information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebSocketHealth"
        503:
          description: Service Unavailable - WebSocket server is not enabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebSocketHealthError"
components:
  schemas:
    SearchAutocompleteBody:
      type: object
      properties:
        queryString:
          type: string
          description: "The string to search for"
          example: "stoora"
        pgTrgmSimilarityThreshold:
          type: number
          format: float
          description: "Threshold for pg_trgm similarity"
          example: 0.2
        limitPerSource:
          type: integer
          description: "Limit per source"
          example: 5
        totalLimit:
          type: integer
          description: "Total limit"
          example: 20
        sources:
          type: array
          items:
            type: object
            properties:
              table:
                type: string
                description: "Table name"
                example: "adresspunkter"
              column:
                type: string
                description: "Column name"
                example: "fastighet"
          example:
            - table: "adresspunkter"
              column: "fastighet"
            - table: "adresspunkter"
              column: "kommundel"
            - table: "adresspunkter"
              column: "beladress"
      required:
        - pgTrgmSimilarityThreshold
        - limitPerSource
        - totalLimit
        - sources
    WebSocketHealth:
      type: object
      properties:
        status:
          type: string
          description: "WebSocket server status"
          example: "WebSocket server is running"
        timestamp:
          type: string
          format: date-time
          description: "ISO timestamp of the health check"
          example: "2024-01-15T10:30:00.000Z"
        clients:
          type: integer
          description: "Number of connected WebSocket clients"
          example: 5
        uptime:
          type: number
          format: float
          description: "Server uptime in seconds"
          example: 3600.5
        memoryUsage:
          type: object
          description: "Node.js memory usage statistics"
          properties:
            rss:
              type: integer
              description: "Resident Set Size"
              example: 45678912
            heapTotal:
              type: integer
              description: "Total heap size"
              example: 20971520
            heapUsed:
              type: integer
              description: "Used heap size"
              example: 12345678
            external:
              type: integer
              description: "External memory usage"
              example: 1234567
            arrayBuffers:
              type: integer
              description: "Array buffer memory usage"
              example: 987654
        cpuUsage:
          type: object
          description: "Node.js CPU usage statistics"
          properties:
            user:
              type: integer
              description: "User CPU time in microseconds"
              example: 1234567
            system:
              type: integer
              description: "System CPU time in microseconds"
              example: 987654
        platform:
          type: string
          description: "Operating system platform"
          example: "linux"
        arch:
          type: string
          description: "CPU architecture"
          example: "x64"
        version:
          type: string
          description: "Node.js version"
          example: "v18.17.0"
        networkUsage:
          type: object
          description: "Network usage statistics (Node.js 18.6.0+)"
          nullable: true
          properties:
            bytesRead:
              type: integer
              description: "Bytes read from network"
            bytesWritten:
              type: integer
              description: "Bytes written to network"
        diskUsage:
          type: object
          description: "Disk usage statistics (Node.js 18.6.0+)"
          nullable: true
          properties:
            bytesRead:
              type: integer
              description: "Bytes read from disk"
            bytesWritten:
              type: integer
              description: "Bytes written to disk"
      required:
        - status
        - timestamp
        - clients
        - uptime
        - memoryUsage
        - cpuUsage
        - platform
        - arch
        - version
    WebSocketHealthError:
      type: object
      properties:
        status:
          type: string
          description: "Error status message"
          example: "WebSocket server is not enabled"
        timestamp:
          type: string
          format: date-time
          description: "ISO timestamp of the error"
          example: "2024-01-15T10:30:00.000Z"
        error:
          type: string
          description: "Error description"
          example: "WebSocket server is not running or not configured"
      required:
        - status
        - timestamp
        - error
    Error:
      type: object
      properties:
        error:
          type: string
          description: "Error message"
          example: "Invalid request"
        code:
          type: string
          description: "Error code"
          example: "INVALID_REQUEST"
        details:
          type: string
          description: "Additional error details"
          example: "The provided map configuration is invalid"
      required:
        - error
    MapConfig:
      type: object
      description: "Map configuration object"
      properties:
        id:
          type: string
          description: "Unique identifier for the map"
          example: "map-123"
        name:
          type: string
          description: "Display name of the map"
          example: "My Map"
        description:
          type: string
          description: "Description of the map"
          example: "A sample map configuration"
        layers:
          type: array
          description: "Array of layer configurations"
          items:
            type: object
            properties:
              id:
                type: string
                description: "Layer identifier"
              name:
                type: string
                description: "Layer name"
              type:
                type: string
                description: "Layer type"
              visible:
                type: boolean
                description: "Whether the layer is visible"
              opacity:
                type: number
                format: float
                description: "Layer opacity (0-1)"
        tools:
          type: array
          description: "Array of tool configurations"
          items:
            type: object
            properties:
              id:
                type: string
                description: "Tool identifier"
              name:
                type: string
                description: "Tool name"
              type:
                type: string
                description: "Tool type"
              enabled:
                type: boolean
                description: "Whether the tool is enabled"
        view:
          type: object
          description: "Map view configuration"
          properties:
            center:
              type: array
              items:
                type: number
              description: "Map center coordinates [longitude, latitude]"
              example: [18.0686, 59.3293]
            zoom:
              type: number
              format: float
              description: "Map zoom level"
              example: 10.5
            projection:
              type: string
              description: "Map projection"
              example: "EPSG:3857"
      required:
        - name
