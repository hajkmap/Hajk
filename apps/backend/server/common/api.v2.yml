openapi: 3.0.3
info:
  title: Hajk Backend API
  description: The Hajk backend API specification is  the authoritative specification for the API to which all Hajk backend implementations must conform.
  version: 2.0.0
servers:
  - url: /api/v2
tags:
  - name: Client-accessible
    description: Resources necessary to load a working map in client
  - name: Admin - Maps and layers
    description: Perform CRUD operations on layers and maps configurations
  - name: Admin - Informative/DocumentHandler
    description: Resources for working with the "Documents API", used mainly by the Informative plugin
  - name: Admin - ActiveDirectory
    description: Resources for working with ActiveDirectory
  - name: Sokigo FB Proxy
    description: Proxy specified in working with Sokigo's FB API
  - name: FME-server Proxy
    description: Proxy for tunneling authenticated requests against FME server
  - name: Specification
    description: The OpenAPI specification
paths:
  /ogc/wfst:
    get:
      tags: [Client-accessible]
      summary: List WFS-T layers
      parameters:
        - in: query
          name: fields
          schema: { type: string }
          description: Komma-separerade fält att returnera
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  count: { type: integer }
                  layers:
                    type: array
                    items:
                      $ref: "#/components/schemas/WFSTLayer"
  /ogc/wfst/{id}:
    get:
      tags: [Client-accessible]
      summary: Get a single WFS-T layer (optionally sparse fields)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: fields
          schema: { type: string }
          description: Komma-separerade fält att returnera (t.ex. "id,caption,url,projection")
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WFSTLayer"
        "400":
          description: Invalid layer ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: WFST layer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /ogc/wfst/{id}/features:
    get:
      tags: [Client-accessible]
      summary: Get features for a WFST layer
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: bbox
          schema: { type: string }
          example: "312000,6400000,320000,6408000"
          description: minx,miny,maxx,maxy i lagrets CRS
        - in: query
          name: limit
          schema: { type: integer, minimum: 1 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
        - in: query
          name: typeName
          schema: { type: string }
          description: Överskriv lagrets första typnamn om flera finns
        - in: query
          name: srsName
          schema: { type: string }
          description: Överskriv lagrets projection (t.ex. EPSG:3009)
        - in: query
          name: version
          schema: { type: string }
          description: WFS-version (default 1.1.0)
        - in: query
          name: filter
          schema: { type: string }
          description: OGC Filter XML (URL-koda värdet)
      responses:
        "200":
          description: GeoJSON FeatureCollection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeatureCollection"
        "415":
          description: Upstream gav inte GeoJSON
  /informative/load/{document}:
    get:
      tags:
        - Client-accessible
      parameters:
        - name: document
          in: path
          description: Name of the document to be fetched
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the JSON file
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentBody"
        5XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /informative/load/{folder}/{name}:
    get:
      tags:
        - Client-accessible
      parameters:
        - name: name
          in: path
          description: Name of the document to be fetched
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the JSON file
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentBody"
        5XX:
          description: Example not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /informative/create:
    put:
      tags:
        - Admin - Informative/DocumentHandler
      requestBody:
        description: Settings for given map's LayerSwitcher component
        content:
          application/json:
            schema:
              type: string
      responses:
        200:
          description: Create a document connected to a specified map
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InformativeDocumentCreateBody"
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /informative/createfolder:
    post:
      tags:
        - Admin - Informative/DocumentHandler
      responses:
        200:
          description: Create a folder
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InformativeCreateFolder"
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - Admin - Informative/DocumentHandler
      responses:
        200:
          description: Create a document connected to a specified map
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InformativeDocumentCreateBody"
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /informative/list:
    get:
      tags:
        - Admin - Informative/DocumentHandler
      responses:
        200:
          description: Return all available documents
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentsList"
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /informative/list/{folder}:
    get:
      tags:
        - Admin - Informative/DocumentHandler
      responses:
        200:
          description: Return all available documents
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Informativedocumentfolderlist"
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /informative/folderlist:
    get:
      tags:
        - Admin - Informative/DocumentHandler
      responses:
        200:
          description: Return all available documents
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Informativelistfolders"
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /informative/list/{name}:
    get:
      tags:
        - Admin - Informative/DocumentHandler
      parameters:
        - name: name
          in: path
          description: Name of the map for which connected documents will be returned
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return available documents for the specified map
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentsList"
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /informative/save/{name}:
    put:
      tags:
        - Admin - Informative/DocumentHandler
      parameters:
        - name: name
          in: path
          description: Document to be saved
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the saved document's body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentsList"
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /informative/save/{folder}/{name}:
    post:
      deprecated: true
      tags:
        - Admin - Informative/DocumentHandler
      parameters:
        - name: name
          in: path
          description: Document to be saved
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the saved document's body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentsList"
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - Admin - Informative/DocumentHandler
      parameters:
        - name: name
          in: path
          description: Document to be saved
          required: true
          schema:
            type: string
      responses:
        200:
          description: Return the saved document's body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentsList"
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /informative/delete/{name}:
    delete:
      tags:
        - Admin - Informative/DocumentHandler
      parameters:
        - name: name
          in: path
          description: Document to deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete the specified document
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentsList"
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /informative/delete/{folder}/{name}:
    delete:
      tags:
        - Admin - Informative/DocumentHandler
      parameters:
        - name: name
          in: path
          description: Document to deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: Delete the specified document
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentsList"
        5XX:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /mapconfig/layers:
    get:
      tags:
        - Admin - Maps and layers
      description: List available layers, do not apply any visibility restrictions (required for Admin UI).
      responses:
        200:
          description: All layers were fetched successfully
          content: {}
  /mapconfig/layers/verify:
    get:
      tags:
        - Admin - Maps and layers
      description: Verify that all layers used in layers repository are reachable
      responses:
        200:
          description: Object that contains missing layers, grouped per OGC service.
          content: {}
  /mapconfig/list:
    get:
      tags:
        - Admin - Maps and layers
      description: List available map configurations
      responses:
        200:
          description: Available maps were fetched successfully
          content: {}
  /mapconfig/listimage:
    get:
      tags:
        - Admin - Maps and layers
      description: List available images in the upload folder
      responses:
        200:
          description: Available images were fetched successfully
          content: {}
  /mapconfig/listvideo:
    get:
      tags:
        - Admin - Maps and layers
      description: List available videos in the upload folder
      responses:
        200:
          description: Available videos were fetched successfully
          content: {}
  /mapconfig/listaudio:
    get:
      tags:
        - Admin - Maps and layers
      description: List available audio files in the upload folder
      responses:
        200:
          description: Available audio files were fetched successfully
          content: {}
  /mapconfig/{map}:
    get:
      tags:
        - Admin - Maps and layers
      parameters:
        - name: map
          in: path
          description: Name of the map to fetch
          required: true
          schema:
            type: string
        - in: header
          name: X-Control-Header
          description: User name that will be supplied to AD
          schema:
            type: string
          required: false
      description: Fetch contents of a map configuration
      responses:
        200:
          description: Success
          content: {}
    put:
      tags:
        - Admin - Maps and layers
      parameters:
        - name: map
          in: path
          description: File name of the new map config
          required: true
          schema:
            type: string
      description: Create a new map configuration
      responses:
        200:
          description: Success
          content: {}
    delete:
      tags:
        - Admin - Maps and layers
      parameters:
        - name: map
          in: path
          description: Name of the map to be deleted
          required: true
          schema:
            type: string
      description: Delete an existing map configuration
      responses:
        200:
          description: Success
          content: {}
  /config/{map}:
    get:
      tags:
        - Client-accessible
      parameters:
        - name: map
          in: path
          description: Name of the map to fetch
          required: true
          schema:
            type: string
        - in: header
          name: X-Control-Header
          description: User name that will be supplied to AD
          schema:
            type: string
          required: false
      description: Fetch contents of a map configuration
      responses:
        200:
          description: Success
          content: {}
  /mapconfig/export/{map}/{format}:
    get:
      tags:
        - Admin - Maps and layers
      parameters:
        - name: map
          in: path
          description: Name of the map to fetch
          required: true
          schema:
            type: string
        - name: format
          in: path
          description: Name of the map to fetch
          required: true
          schema:
            type: string
      description: Exports the map's layers in a human-readable format
      responses:
        200:
          description: Success
          content: {}
  /mapconfig/duplicate/{nameFrom}/{nameTo}:
    put:
      tags:
        - Admin - Maps and layers
      parameters:
        - name: nameFrom
          in: path
          description: Name of the map to be duplicated
          required: true
          schema:
            type: string
        - name: nameTo
          in: path
          description: Name of the new map (the duplicate)
          required: true
          schema:
            type: string
      description: Create a new map configuration by duplicating an existing one
      responses:
        200:
          description: Success
          content: {}
  /ad/availableadgroups:
    get:
      tags:
        - Admin - ActiveDirectory
      description: Get a list of all available AD groups to make it easier for admins to set map and layer permissions
      responses:
        200:
          description: Success
          content: {}
  /ad/findcommonadgroupsforusers:
    get:
      tags:
        - Admin - ActiveDirectory
      description: Find out which AD group membership is shared between specified users
      parameters:
        - in: query
          name: users
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          allowReserved: true
      responses:
        200:
          description: Success
          content: {}
  /ad/users:
    get:
      tags:
        - Admin - ActiveDirectory
      description: Get the current content of local AD Users store
      responses:
        200:
          description: Success
          content: {}
  /ad/groups:
    get:
      tags:
        - Admin - ActiveDirectory
      description: Get the current content of local AD Groups store
      responses:
        200:
          description: Success
          content: {}
  /ad/groupsPerUser:
    get:
      tags:
        - Admin - ActiveDirectory
      description: Get the current content of local AD Groups Per User store
      responses:
        200:
          description: Success
          content: {}
  /ad/flushStores:
    put:
      tags:
        - Admin - ActiveDirectory
      description: Flush the contents of all local AD stores (removes the cached objects)
      responses:
        200:
          description: Success
          content: {}
  /fbproxy/{query}:
    get:
      tags:
        - Sokigo FB Proxy
      parameters:
        - name: query
          in: path
          description: The query to be proxied
          required: true
          schema:
            type: string
      description: Proxy the specified query to Sokigo's FB API
      responses:
        200:
          description: Result will vary depending on response from the API
          content: {}
  /fmeproxy/{query}:
    get:
      tags:
        - FME-server Proxy
      parameters:
        - name: query
          in: path
          description: Path corresponding to an endpoint on the FME-server REST API.
          required: true
          schema:
            type: string
      description: Proxy the specified query to FME-server REST API. For information on available endpoints, checkout the [FME-server API documentation](https://docs.safe.com/fme/html/FME_REST/apidoc/v3/#). The proxy will forward all HTTP-methods, not only GET.
      responses:
        200:
          description: Result will vary depending on response from the API.
          content: {}
  /spec:
    get:
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification
          content: {}
  /settings/layermenu:
    put:
      tags:
        - Admin - Maps and layers
      requestBody:
        description: Settings for given map's LayerSwitcher component
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LayerSwitcherBody"
        required: true
      parameters:
        - name: mapFile
          in: query
          description: Name of the map who's LayerSwitcher config should be written
          required: true
          schema:
            type: string
      responses:
        204:
          description: All good
          content: {}
  /settings/mapsettings:
    put:
      tags:
        - Admin - Maps and layers
      requestBody:
        description: Settings for given map's LayerSwitcher component
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LayerSwitcherBody"
        required: true
      parameters:
        - name: mapFile
          in: query
          description: Name of the map who's LayerSwitcher config should be written
          required: true
          schema:
            type: string
      responses:
        204:
          description: All good
          content: {}
  /settings/toolsettings:
    put:
      tags:
        - Admin - Maps and layers
      requestBody:
        description: Settings for given map's LayerSwitcher component
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LayerSwitcherBody"
        required: true
      parameters:
        - name: mapFile
          in: query
          description: Name of the map who's LayerSwitcher config should be written
          required: true
          schema:
            type: string
      responses:
        204:
          description: All good
          content: {}
  /settings/update/{map}/{tool}:
    put:
      tags:
        - Admin - Maps and layers
      requestBody:
        description: Settings for given map's specific tool
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LayerSwitcherBody"
        required: true
      parameters:
        - name: map
          in: path
          description: Name of the map
          required: true
          schema:
            type: string
        - name: tool
          in: path
          description: Name of the tool to be edited
          required: true
          schema:
            type: string
      responses:
        201:
          description: Created
          content: {}
        204:
          description: Updated
          content: {}
  /settings/{layerType}:
    post:
      tags:
        - Admin - Maps and layers
      description: Add a new layer of specified type
      requestBody:
        description: Content of the layer to be added
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExampleBody"
        required: true
      parameters:
        - name: layerType
          in: path
          description: The type of layer that will be added
          required: true
          schema:
            type: string
      responses:
        204:
          description: All good
          content: {}
    put:
      tags:
        - Admin - Maps and layers
      description: Replace a specific layer with supplied content
      requestBody:
        description: Layer to be added or updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExampleBody"
        required: true
      parameters:
        - name: layerType
          in: path
          description: The type of layer that will be updated
          required: true
          schema:
            type: string
      responses:
        204:
          description: All good
          content: {}
  /settings/{type}/{layerId}:
    delete:
      tags:
        - Admin - Maps and layers
      parameters:
        - name: type
          in: path
          description: The kind of layer to delete
          required: true
          schema:
            type: string
        - name: layerId
          in: path
          description: The ID of layer to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Layer deleted successfully
          content: {}
  /fir/realestateownerreport:
    post:
      tags:
        - FIR
      description: Generates a realestate owner report using a myCarta FR Direkt endpoint. Returns an url to the generated report.
      responses:
        200:
          description: FIR
          content: {}
      parameters:
        - in: header
          name: X-Control-Header
          description: User name that will be supplied to AD
          schema:
            type: string
          required: false
      requestBody:
        description: Json with UUID's and function parameters
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ExampleBody"
  /fir/residentreport:
    post:
      tags:
        - FIR
      description: Generates a resident report. Returns an url to the generated xlsx report.
      responses:
        200:
          description: FIR
          content: {}
      parameters:
        - in: header
          name: X-Control-Header
          description: User name that will be supplied to AD
          schema:
            type: string
          required: false
      requestBody:
        description: Json with table data
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ExampleBody"
components:
  schemas:
    Example:
      type: object
      properties:
        id:
          type: integer
          example: 3
        name:
          type: string
          example: example 3
    WFSTLayer:
      type: object
      properties:
        id: { type: string }
        caption: { type: string }
        url: { type: string, format: uri }
        layers:
          type: array
          items: { type: string }
        projection: { type: string }
        editableFields:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
        nonEditableFields:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
    Geometry:
      type: object
      required: [type, coordinates]
      additionalProperties: true
      properties:
        type:
          type: string
          enum:
            [
              Point,
              LineString,
              Polygon,
              MultiPoint,
              MultiLineString,
              MultiPolygon,
            ]
        coordinates:
          type: array
          items: {}
    Feature:
      type: object
      required: [type, geometry, properties]
      additionalProperties: true
      properties:
        type: { type: string, enum: [Feature] }
        id:
          oneOf: [{ type: string }, { type: integer }]
        geometry:
          type: object
          nullable: true
          allOf:
            - $ref: "#/components/schemas/Geometry"
        properties:
          type: object
          additionalProperties: true
    FeatureCollection:
      type: object
      required: [type, features]
      additionalProperties: true
      properties:
        type: { type: string, enum: [FeatureCollection] }
        bbox:
          type: array
          items: { type: number }
          minItems: 4
          maxItems: 6
        features:
          type: array
          items:
            $ref: "#/components/schemas/Feature"
    Error:
      type: object
      properties:
        errno:
          type: integer
          example: -2
        code:
          type: string
          example: ENOENT
    DocumentBody:
      type: object
      properties:
        chapters:
          type: array
          items:
            type: object
            properties:
              header:
                type: string
              html:
                type: string
              expanded:
                type: boolean
              mapSettings:
                type: object
              chapters:
                type: array
                items:
                  type: object
    DocumentsList:
      type: array
      items:
        type: string
      example: ["doc_1", "doc_2", "doc_3"]
    InformativeDocumentCreateBody:
      type: object
      properties:
        documentName:
          type: string
        documentMap:
          type: string
    InformativeCreateFolder:
      type: object
      properties:
        folderName:
          type: string
    Informativelistfolders:
      type: object
      properties:
        folderName:
          type: string
    Informativedocumentfolderlist:
      type: object
      properties:
        folderName:
          type: string
    ExampleBody:
      title: example
      # required:
      #   - name
      type: object
      properties:
        name:
          type: string
          example: no_stress
    LayerSwitcherBody:
      title: LayerSwitcher body
