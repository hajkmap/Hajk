/* === THEME TOKENS === */
export const themes = {
  light: {
    appBg: "#ffffff",
    panelBg: "#fafafa",
    panelBgAlt: "#f6f7f9",
    thBg: "#f9fafb",

    border: "#d5d8dcff",
    borderMuted: "#f1f5f9",
    listDivider: "#f0f0f0",

    text: "#111827",
    textMuted: "#6b7280",
    label: "#374151",

    primary: "#2563eb",
    primarySolid: "#547edaff",
    primarySoft: "#eaf1ff",

    rowHover: "#eef6ff",
    rowSelected: "#dbeafe",

    warning: "#b45309",
    warningBg: "#fef3c7",

    success: "#059669",
    successBg: "#d1fae5",

    overlayBg: "#ffffff",
    shadow: "0 4px 6px rgba(0,0,0,0.1)",

    danger: "#ef4444",
    dangerBg: "rgba(239,68,68,0.08)",
  },
  dark: {
    appBg: "#0b0f16",
    panelBg: "#0f172a",
    panelBgAlt: "#111827",
    thBg: "#0b1324",

    border: "#263040",
    borderMuted: "#1f2937",
    listDivider: "#1f2937",

    text: "#e5e7eb",
    textMuted: "#9ca3af",
    label: "#cbd5e1",

    primary: "#60a5fa",
    primarySolid: "#3b82f6",
    primarySoft: "rgba(96,165,250,0.15)",

    rowHover: "rgba(96,165,250,0.08)",
    rowSelected: "rgba(96,165,250,0.22)",

    warning: "#f59e0b",
    warningBg: "rgba(245,158,11,0.1)",

    success: "#10b981",
    successBg: "rgba(16,185,129,0.1)",

    overlayBg: "#0f172a",
    shadow: "0 8px 16px rgba(0,0,0,0.45)",

    danger: "#f87171",
    dangerBg: "rgba(248,113,113,0.12)",
  },
};

/* === Styles (generated from theme) === */
const TABLE_MIN = 460;

export function makeStyles(t, isMobile) {
  return {
    iconBtn: {
      padding: isMobile ? 6 : 8,
      borderRadius: 999,
      border: `1px solid ${t.border}`,
      background: t.overlayBg,
      color: t.text,
      cursor: "pointer",
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      lineHeight: 0,
    },
    iconBtnDisabled: {
      padding: isMobile ? 6 : 8,
      borderRadius: 999,
      border: `1px solid ${t.border}`,
      background: t.overlayBg,
      color: t.text,
      opacity: 0.55,
      cursor: "default",
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      lineHeight: 0,
    },
    iconToggle: (active) => ({
      padding: isMobile ? 6 : 8,
      borderRadius: 999,
      border: `1px solid ${active ? t.primary : t.border}`,
      background: active ? t.primarySoft : t.overlayBg,
      color: t.text,
      cursor: "pointer",
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      lineHeight: 0,
    }),

    shell: {
      display: "flex",
      flexDirection: "column",
      gap: 8,
      height: "100%",
      overflow: "hidden",
      fontFamily: "'Inter', system-ui, -apple-system, Segoe UI, Roboto, Arial",
      color: t.text,
      background: t.appBg,
      minWidth: 0,
      minHeight: 0,
    },
    toolbar: {
      display: "flex",
      alignItems: "center",
      gap: isMobile ? 4 : 8,
      padding: isMobile ? 6 : 8,
      background: t.panelBgAlt,
      border: `1px solid ${t.border}`,
      borderRadius: 8,
      flexWrap: isMobile ? "wrap" : "nowrap",
    },
    toolbarTitle: {
      fontWeight: 600,
      fontSize: isMobile ? 14 : 16,
      width: isMobile ? "100%" : "auto",
      marginBottom: isMobile ? 4 : 0,
    },
    toolbarSpacer: { width: 10 },
    toolbarInfo: {
      display: "flex",
      alignItems: "center",
      gap: isMobile ? 4 : 8,
      flexWrap: isMobile ? "wrap" : "nowrap",
      width: isMobile ? "100%" : "auto",
    },
    toolbarStats: {
      color: t.textMuted,
      fontSize: isMobile ? 11 : 12,
      whiteSpace: isMobile ? "nowrap" : "normal",
    },
    spacer: { flex: 1 },

    btn: {
      padding: isMobile ? "6px 10px" : "8px 12px",
      borderRadius: 8,
      border: `1px solid ${t.border}`,
      background: t.overlayBg,
      color: t.text,
      cursor: "pointer",
      fontSize: isMobile ? 12 : 14,
    },
    btnSmall: {
      padding: "4px 8px",
      fontSize: 12,
      borderRadius: 8,
      border: `1px solid ${t.border}`,
      background: t.overlayBg,
      color: t.text,
      cursor: "pointer",
    },
    btnPrimary: {
      padding: isMobile ? "6px 10px" : "8px 12px",
      borderRadius: 8,
      border: `1px solid ${t.primary}`,
      background: t.primarySolid,
      color: "#ffffff",
      cursor: "pointer",
      fontSize: isMobile ? 12 : 14,
    },
    btnPrimaryDisabled: {
      padding: isMobile ? "6px 10px" : "8px 12px",
      borderRadius: 8,
      border: `1px solid ${t.primary}`,
      background: t.primarySolid,
      color: "#ffffff",
      opacity: 0.55,
      cursor: "default",
      fontSize: isMobile ? 12 : 14,
    },
    btnDisabled: {
      padding: isMobile ? "6px 10px" : "8px 12px",
      borderRadius: 8,
      border: `1px solid ${t.border}`,
      background: t.overlayBg,
      color: t.text,
      opacity: 0.55,
      cursor: "default",
      fontSize: isMobile ? 12 : 14,
    },
    toggle: (active) => ({
      padding: isMobile ? "5px 8px" : "6px 10px",
      borderRadius: 999,
      border: `1px solid ${active ? t.primary : t.border}`,
      background: active ? t.primarySoft : t.overlayBg,
      color: t.text,
      cursor: "pointer",
      fontSize: isMobile ? 12 : 14,
    }),

    // Mobile-specific panel styles
    mobileFormActions: {
      padding: 8,
      borderTop: `1px solid ${t.border}`,
      display: "flex",
      gap: 4,
      flexWrap: "wrap",
      background: t.panelBg,
    },
    mobileTabBar: {
      display: "flex",
      gap: 4,
      padding: "8px 8px 0 8px",
      background: t.panelBg,
    },
    mobileTab: (active) => ({
      flex: 1,
      padding: "8px 12px",
      border: `1px solid ${t.border}`,
      borderBottom: active ? "none" : `1px solid ${t.border}`,
      borderRadius: "8px 8px 0 0",
      background: active ? t.panelBg : t.panelBgAlt,
      color: t.text,
      cursor: "pointer",
      fontSize: 14,
      fontWeight: active ? 600 : 400,
      textAlign: "center",
    }),
    mobilePaneContainer: {
      flex: 1,
      border: `1px solid ${t.border}`,
      borderRadius: "0 0 8px 8px",
      overflow: "hidden",
      display: "flex",
      flexDirection: "column",
      background: t.panelBg,
      minHeight: 0,
    },

    paneWrap: {
      display: isMobile ? "flex" : "grid",
      gridTemplateColumns: isMobile
        ? "1fr"
        : "minmax(320px, 1fr) minmax(260px, 2fr)",
      gap: 12,
      flex: "1 1 0",
      minHeight: 0,
      overflowX: "auto",
      minWidth: 0,
      flexDirection: "column",
    },
    pane: {
      border: `1px solid ${t.border}`,
      borderRadius: 8,
      overflow: "hidden",
      display: "flex",
      flexDirection: "column",
      flex: "1 1 0",
      minHeight: 0,
      background: t.panelBg,
      minWidth: 0,
    },
    paneHeader: {
      padding: isMobile ? 8 : 10,
      background: t.panelBg,
      borderBottom: `1px solid ${t.border}`,
      fontWeight: 600,
      color: t.text,
      fontSize: isMobile ? 14 : 16,
    },
    paneHeaderWithActions: {
      padding: isMobile ? 8 : 10,
      background: t.panelBg,
      borderBottom: `1px solid ${t.border}`,
      fontWeight: 600,
      display: "flex",
      alignItems: "center",
      gap: isMobile ? 4 : 8,
      color: t.text,
      fontSize: isMobile ? 14 : 16,
      flexWrap: isMobile ? "wrap" : "nowrap",
    },

    list: { overflowY: "auto", overflowX: "hidden", flex: 1, minHeight: 0 },
    // status: null | "add" | "delete"
    listRow: (sel, status = null) => {
      const isAdd = status === "add";
      const isDelete = status === "delete";
      return {
        display: "grid",
        gridTemplateColumns: "28px 1fr",
        alignItems: "center",
        gap: 8,
        padding: isMobile ? "6px 8px" : "8px 10px",
        borderBottom: `1px solid ${t.listDivider}`,
        background: sel
          ? t.rowHover
          : isAdd
            ? t.warningBg
            : isDelete
              ? t.dangerBg
              : "transparent",
        cursor: "pointer",
        minWidth: 0,
        outline:
          isAdd || isDelete
            ? `2px dashed ${isDelete ? t.danger || "#ef4444" : t.warning}`
            : "none",
        textDecoration: isDelete ? "line-through" : "none",
        opacity: isDelete ? 0.9 : 1,
      };
    },
    listRowText: {
      minWidth: 0,
    },
    wrapText: {
      whiteSpace: "normal",
      overflowWrap: "anywhere",
      wordBreak: "break-word",
    },
    listRowTitle: {
      fontWeight: 600,
      fontSize: isMobile ? 12 : 13,
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
    },
    listRowSubtitle: {
      fontSize: isMobile ? 11 : 12,
      color: t.textMuted,
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
    },
    listEmpty: { padding: 12, color: t.textMuted },
    listFooter: {
      padding: isMobile ? 8 : 10,
      display: "flex",
      gap: 8,
      borderTop: `1px solid ${t.border}`,
      background: t.panelBg,
      flexWrap: isMobile ? "wrap" : "nowrap",
      alignItems: "center",
    },
    listFooterInfo: { fontSize: 12, color: t.textMuted },

    form: {
      padding: isMobile ? 8 : 12,
      overflow: "auto",
      display: "grid",
      gridTemplateColumns: isMobile ? "1fr" : "1fr 1fr",
      gap: isMobile ? 8 : 12,
      flex: 1,
      minHeight: 0,
      color: t.text,
      minWidth: 0,
    },
    formEmpty: {
      padding: 16,
      color: t.textMuted,
      textAlign: "center",
    },
    formFooter: {
      padding: isMobile ? 8 : 18,
      borderTop: `1px solid ${t.border}`,
      fontSize: 12,
      color: t.textMuted,
      background: t.panelBg,
      display: "flex",
      alignItems: "center",
    },
    formFooterDirty: {
      padding: isMobile ? 8 : 18,
      borderTop: `1px solid ${t.border}`,
      fontSize: 12,
      color: t.warning,
      background: t.panelBg,
      display: "flex",
      alignItems: "center",
    },

    field: { display: "flex", flexDirection: "column", gap: 6 },
    label: { fontSize: 12, color: t.label },
    labelChanged: { color: "#f59e0b", marginLeft: 4 },

    input: {
      padding: isMobile ? 6 : 8,
      border: `1px solid ${t.border}`,
      borderRadius: 8,
      fontSize: 14,
      background: t.overlayBg,
      color: t.text,
    },
    inputChanged: {
      padding: isMobile ? 6 : 8,
      border: `1px solid ${t.warning}`,
      borderRadius: 8,
      fontSize: 14,
      background: t.warningBg,
      color: t.text,
    },

    checkbox: {
      display: "flex",
      alignItems: "center",
      gap: 6,
      fontSize: 12,
      marginRight: 8,
      color: t.text,
      flexShrink: 0,
    },

    tableHeaderLeft: {
      display: "flex",
      alignItems: "center",
      gap: 6,
      minWidth: 0,
      flexShrink: 1,
    },
    tableHeaderBadges: {
      display: "flex",
      alignItems: "center",
      gap: 6,
      minWidth: 0,
    },
    statusPill: {
      fontSize: isMobile ? 10 : 12,
      padding: isMobile ? "2px 6px" : "2px 8px",
      borderRadius: 999,
      whiteSpace: "nowrap",
      lineHeight: 1.4,
    },
    statusPillWarn: {
      border: `1px solid ${t.warning}`,
      background: t.warningBg,
      color: t.text,
    },
    statusPillDanger: {
      border: `1px solid ${t.danger}`,
      background: t.dangerBg,
      color: t.text,
    },
    tableHeaderButtonsWrap: {
      display: "flex",
      alignItems: "center",
      gap: isMobile ? 4 : 8,
      flexShrink: 0,
      flexWrap: "nowrap",
    },
    tableWrap: {
      border: `1px solid ${t.border}`,
      borderRadius: 8,
      background: t.panelBg,
      display: "flex",
      flexDirection: "column",
      boxSizing: "border-box",
      flex: "1 1 0",
      minHeight: 0,
      overflow: "hidden",
    },
    tableInner: {
      display: "inline-block",
      minWidth: `${TABLE_MIN}px`,
    },
    tableHeaderBar: {
      display: "flex",
      gap: isMobile ? 4 : 8,
      alignItems: "center",
      padding: isMobile ? 6 : 8,
      background: t.panelBg,
      borderBottom: `1px solid ${t.border}`,
      color: t.text,
      flexWrap: "wrap",
      position: "sticky",
      top: 0,
      zIndex: 2,
    },
    tableHeaderTitle: {
      fontWeight: 600,
      fontSize: isMobile ? 14 : 16,
      width: "auto",
    },

    tableViewport: {
      flex: "1 1 0",
      minHeight: 0,
      minWidth: 0,
      overflowX: "auto",
      overflowY: "auto",
      WebkitOverflowScrolling: "touch",
      position: "relative",
      background: t.panelBg,
    },
    table: {
      borderCollapse: "separate",
      borderSpacing: 0,
      tableLayout: "auto",
      width: "max-content",
      color: t.text,
    },
    th: {
      position: "sticky",
      top: 0,
      zIndex: 1,
      background: t.thBg,
      textAlign: "left",
      fontWeight: 600,
      fontSize: isMobile ? 12 : 13,
      padding: isMobile ? "4px 6px" : "6px 8px",
      borderBottom: `1px solid ${t.border}`,
      cursor: "pointer",
      whiteSpace: "nowrap",
      color: t.text,
    },
    thContent: { display: "flex", alignItems: "center" },
    thControls: {
      display: "inline-flex",
      alignItems: "center",
      gap: isMobile ? 4 : 6,
      position: "relative",
    },
    sortButton: {
      border: "none",
      background: "transparent",
      cursor: "pointer",
      padding: 0,
      lineHeight: 1,
      color: t.text,
    },
    columnHeader: { cursor: "pointer", userSelect: "none" },

    filterButton: (hasActiveFilter) => ({
      background: hasActiveFilter ? t.rowSelected : "transparent",
      border: "1px solid transparent",
      cursor: "pointer",
      padding: 2,
      borderRadius: 4,
      display: "flex",
      alignItems: "center",
      color: t.text,
    }),
    filterOverlay: {
      position: "absolute",
      top: "calc(100% + 6px)",
      left: 0,
      zIndex: 1000,
      background: t.overlayBg,
      border: `1px solid ${t.border}`,
      borderRadius: 8,
      boxShadow: t.shadow,
      padding: 8,
      minWidth: 200,
      maxHeight: 300,
      overflow: "auto",
      color: t.text,
    },
    filterOverlayButtons: { marginBottom: 8, display: "flex", gap: 4 },
    filterCheckbox: {
      display: "flex",
      alignItems: "center",
      gap: 6,
      padding: "4px 0",
      cursor: "pointer",
      fontSize: 13,
      color: t.text,
    },

    tdEdited: {
      fontSize: isMobile ? 12 : 13,
      padding: isMobile ? "6px 8px" : "8px 16px",
      borderBottom: `1px solid ${t.borderMuted}`,
      lineHeight: "20px",
      background: t.warningBg,
      outline: `1px dashed ${t.warning}`,
    },
    tdPlaceholder: {
      fontSize: isMobile ? 12 : 13,
      padding: isMobile ? "6px 8px" : "8px 16px",
      borderBottom: `1px solid ${t.borderMuted}`,
      lineHeight: "20px",
      color: t.textMuted,
      fontStyle: "italic",
    },
    cellInput: {
      width: "100%",
      boxSizing: "border-box",
      padding: isMobile ? "4px 6px" : "6px 8px",
      borderRadius: 6,
      border: `1px solid ${t.border}`,
      background: t.overlayBg,
      color: t.text,
      fontSize: isMobile ? 12 : 13,
      outline: "none",
    },
    td: {
      fontSize: isMobile ? 12 : 13,
      padding: isMobile ? "6px 8px" : "8px 16px",
      borderBottom: `1px solid ${t.borderMuted}`,
      lineHeight: "20px",
      color: t.text,
    },
    tdEmpty: {
      fontSize: isMobile ? 12 : 13,
      padding: isMobile ? "6px 8px" : "8px 16px",
      borderBottom: `1px solid ${t.borderMuted}`,
      lineHeight: "20px",
      color: t.textMuted,
    },
    tr: (selected, pending) => ({
      background: selected
        ? t.rowSelected
        : pending === "add"
          ? t.warningBg
          : pending === "delete"
            ? t.dangerBg
            : "transparent",
      cursor: "pointer",
      outline: pending
        ? `2px dashed ${pending === "delete" ? t.danger : t.warning}`
        : "none",
    }),

    notification: {
      position: "fixed",
      bottom: 20,
      right: 20,
      padding: "12px 16px",
      borderRadius: 8,
      background: t.successBg,
      border: `1px solid ${t.success}`,
      color: t.text,
      boxShadow: t.shadow,
      display: "flex",
      alignItems: "center",
      gap: 8,
      animation: "slideIn 0.3s ease-out",
      maxWidth: isMobile ? "calc(100% - 40px)" : "auto",
      left: isMobile ? 20 : "auto",
    },
  };
}
